# -*- coding: utf-8 -*-  
# Default encoding for Python3 code is utf-8. Here it is mentioned to also support Python2.x in the same time.
"""MDETR_demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11xz5IhwqAqHj9-XAIP17yVIuJsLqeYYJ

# MDETR - Modulated Detection for End-to-End Multi-Modal Understanding

Welcome to the demo notebook for MDETR. We'll show-case detection, segmentation and question answering

## Preliminaries

This section contains the initial boilerplate. Run it first.
"""

import torch
from PIL import Image
import numpy as np
import requests
import torchvision.transforms as T
import matplotlib.pyplot as plt
from collections import defaultdict
import torch.nn.functional as F
import numpy as np
from skimage.measure import find_contours

from matplotlib import patches,  lines
from matplotlib.patches import Polygon

torch.set_grad_enabled(False);

# standard PyTorch mean-std input image normalization
transform = T.Compose([
    T.Resize(800),
    T.ToTensor(),
    T.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# for output bounding box post-processing
def box_cxcywh_to_xyxy(x):
    x_c, y_c, w, h = x.unbind(1)
    b = [(x_c - 0.5 * w), (y_c - 0.5 * h),
         (x_c + 0.5 * w), (y_c + 0.5 * h)]
    return torch.stack(b, dim=1)

def rescale_bboxes(out_bbox, size):
    img_w, img_h = size
    b = box_cxcywh_to_xyxy(out_bbox)
    b = b * torch.tensor([img_w, img_h, img_w, img_h], dtype=torch.float32)
    return b

# colors for visualization
COLORS = [[0.000, 0.447, 0.741], [0.850, 0.325, 0.098], [0.929, 0.694, 0.125],
          [0.494, 0.184, 0.556], [0.466, 0.674, 0.188], [0.301, 0.745, 0.933]]

def apply_mask(image, mask, color, alpha=0.5):
    """Apply the given mask to the image.
    """
    for c in range(3):
        image[:, :, c] = np.where(mask == 1,
                                  image[:, :, c] *
                                  (1 - alpha) + alpha * color[c] * 255,
                                  image[:, :, c])
    return image

def plot_results(pil_img, scores, boxes, labels, masks=None):
    plt.figure(figsize=(16,10))
    np_image = np.array(pil_img)
    ax = plt.gca()
    colors = COLORS * 100
    if masks is None:
      masks = [None for _ in range(len(scores))]
    assert len(scores) == len(boxes) == len(labels) == len(masks)
    for s, (xmin, ymin, xmax, ymax), l, mask, c in zip(scores, boxes.tolist(), labels, masks, colors):
        ax.add_patch(plt.Rectangle((xmin, ymin), xmax - xmin, ymax - ymin,
                                   fill=False, color=c, linewidth=3))
        text = f'{l}: {s:0.2f}'
        ax.text(xmin, ymin, text, fontsize=15, bbox=dict(facecolor='white', alpha=0.8))

        if mask is None:
          continue
        np_image = apply_mask(np_image, mask, c)

        padded_mask = np.zeros((mask.shape[0] + 2, mask.shape[1] + 2), dtype=np.uint8)
        padded_mask[1:-1, 1:-1] = mask
        contours = find_contours(padded_mask, 0.5)
        for verts in contours:
          # Subtract the padding and flip (y, x) to (x, y)
          verts = np.fliplr(verts) - 1
          p = Polygon(verts, facecolor="none", edgecolor=c)
          ax.add_patch(p)


    plt.imshow(np_image)
    plt.axis('off')
    plt.show()


def add_res(results, ax, color='green'):
    #for tt in results.values():
    if True:
        bboxes = results['boxes']
        labels = results['labels']
        scores = results['scores']
        #keep = scores >= 0.0
        #bboxes = bboxes[keep].tolist()
        #labels = labels[keep].tolist()
        #scores = scores[keep].tolist()
    #print(torchvision.ops.box_iou(tt['boxes'].cpu().detach(), torch.as_tensor([[xmin, ymin, xmax, ymax]])))

    colors = ['purple', 'yellow', 'red', 'green', 'orange', 'pink']

    for i, (b, ll, ss) in enumerate(zip(bboxes, labels, scores)):
        ax.add_patch(plt.Rectangle((b[0], b[1]), b[2] - b[0], b[3] - b[1], fill=False, color=colors[i], linewidth=3))
        cls_name = ll if isinstance(ll,str) else CLASSES[ll]
        text = f'{cls_name}: {ss:.2f}'
        print(text)
        ax.text(b[0], b[1], text, fontsize=15, bbox=dict(facecolor='white', alpha=0.8))

"""## Detection

In this section, we show the performance of our pre-trained model on modulated detection.
Keep in mind that this model wasn't fine-tuned for any specific task.

We load the 'mdetr_efficientnetB5' model from torch hub

To see list of all the models you can try: torch.hub.list('ashkamath/mdetr:main')
To get info on the model you can try: torch.hub.help('ashkamath/mdetr:main', 'mdetr_efficientnetB5')
"""

model, postprocessor = torch.hub.load('ashkamath/mdetr:main', 'mdetr_efficientnetB5', pretrained=True, return_postprocessor=True)
model = model.cuda()
model.eval();

"""Next, we retrieve an image on which we wish to test the model. Here, we use an image from the validation set of COCO"""


def plot_inference(im, caption, gaze):
  # mean-std normalize the input image (batch-size: 1)
  img = transform(im).unsqueeze(0).cuda()

  # propagate through the model
  memory_cache = model(img, [caption], gaze, encode_and_save=True)
  outputs = model(img, [caption], gaze, encode_and_save=False, memory_cache=memory_cache)

  # keep only predictions with 0.7+ confidence
  probas = 1 - outputs['pred_logits'].softmax(-1)[0, :, -1].cpu()
  keep = (probas > 0.7).cpu()

  # convert boxes from [0; 1] to image scales
  bboxes_scaled = rescale_bboxes(outputs['pred_boxes'].cpu()[0, keep], im.size)

  # Extract the text spans predicted by each box
  positive_tokens = (outputs["pred_logits"].cpu()[0, keep].softmax(-1) > 0.1).nonzero().tolist()
  predicted_spans = defaultdict(str)
  for tok in positive_tokens:
    item, pos = tok
    if pos < 255:
        span = memory_cache["tokenized"].token_to_chars(0, pos)
        predicted_spans [item] += " " + caption[span.start:span.end]

  labels = [predicted_spans [k] for k in sorted(list(predicted_spans .keys()))]
  plot_results(im, probas[keep], bboxes_scaled, labels)

"""Let's first try to single out the salient objects in the image"""

# Original demo 
# url = "http://images.cocodataset.org/val2017/000000281759.jpg"
# im.show()
# plot_inference(im, "5 people each holding an umbrella")

# MDETR_4obj_2mustards + Gaze info
im = Image.open("/home/suka/code/mdetr/MDETR_test_data/MDETR_4obj_2mustards/rgb_img/00000005.ppm")
im.show()

# Raw heatmap from VTD
raw_hm = torch.load("/home/suka/code/mdetr/raw_hm_dump(1)/raw_hm_dump/raw_hm_MDETR_4obj_2mustards/tensor1704893612.pt")
normalized_raw_hm = raw_hm / torch.sum(raw_hm, dim=(2,3), keepdim=True)
print("raw_hm shape: ", raw_hm.shape)
print("normalized_raw_hm shape: ", normalized_raw_hm.shape)

# Modulated heatmap from VTD
norm_map = Image.open("/home/suka/code/mdetr/MDETR_test_data/MDETR_4obj_2mustards/normMap/00000001.ppm")
#print("norm_map size: ",norm_map.size, "\n norm_map max", max(norm_map.getdata()))

# Modulated heatmap from VTD - Gray scale
norm_map_gray = norm_map.convert('L')
#print("norm_map_gray size: ",norm_map_gray.size, "\n norm_map_gray max", max(norm_map_gray.getdata()))

fig, axs = plt.subplots(1, 2, figsize=(10, 5))
axs[0].imshow(norm_map)
axs[0].set_title("Original Heatmap")

axs[1].imshow(norm_map_gray, cmap='gray')
axs[1].set_title("Gray scale heatmap")
plt.show()


# norm_map normalize and resize
normalized_norm_map = norm_map_gray.point(lambda x: (x - 127.5) / 127.5)
transform_normMap_noTensor = T.transforms.Compose([
    T.Resize(25)
])
reszied_normmap_image = transform_normMap_noTensor(normalized_norm_map)
#print("reszied_normmap_image max: ", max(reszied_normmap_image.getdata()), "\n reszied_normmap_image shape: ", reszied_normmap_image.size)

# Normalize and reszie as tensor
transform_normMap = T.transforms.Compose([
    T.Resize(800),
    T.transforms.ToTensor()
])
normalized_norm_map_tensor = transform_normMap(norm_map_gray)
#print("normalized_norm_map_tensor max: ", torch.max(normalized_norm_map_tensor), "\n normalized_norm_map_tensor shape: ", normalized_norm_map_tensor.shape, "\n",normalized_norm_map_tensor)

# Visualize norm_map tensor before downsampling
normalized_norm_map_tensor_array = np.squeeze(normalized_norm_map_tensor.cpu().numpy().astype(np.uint8))*255
#print("normalized_norm_map_tensor_array shape", normalized_norm_map_tensor_array.shape)
normalized_norm_map_tensor_image = Image.fromarray(normalized_norm_map_tensor_array)
normalized_norm_map_tensor_image.show()

# Visualize downsampled norm map
downsampled_norm_map = torch.nn.functional.interpolate(normalized_norm_map_tensor.unsqueeze(0),size=(25,34), mode='bilinear', align_corners=False).squeeze(0)
#print("downsampled_norm_map max: ", torch.max(downsampled_norm_map), "\n downsampled_norm_map shape: ", downsampled_norm_map.shape)
downsampled_norm_map_array = np.squeeze(downsampled_norm_map.cpu().numpy().astype(np.uint8))*255
downsampled_norm_map_image = Image.fromarray(downsampled_norm_map_array)

fig, axs = plt.subplots(1, 2, figsize=(10, 5))
axs[0].imshow(reszied_normmap_image, cmap='gray')
axs[0].set_title("downsampled heatmap image")

axs[1].imshow(downsampled_norm_map_image, cmap='gray')
axs[1].set_title("downsampled heatmap tensor")
plt.show()

plot_inference(im, "Pass the small yellow mustard bottle on the left.", normalized_norm_map_tensor)